// server/main.go //generated by chat
package main

import (
	"backend_go/internal/handlers"
	"github.com/gin-gonic/gin"
	"net/http"
)

func main() {
	r := gin.Default()

	// Middleware
	r.Use(corsMiddleware())
	r.Use(loggingMiddleware())

	// Dashboard Routes
	dashboard := r.Group("/api/dashboard")
	{
		dashboard.GET("/last_study_session", handlers.GetLastStudySession)
		dashboard.GET("/study_progress", handlers.GetStudyProgress)
		dashboard.GET("/quick-stats", handlers.GetQuickStats)
	}

	// Study Activities Routes
	studyActivities := r.Group("/api/study_activities")
	{
		studyActivities.GET(":id", handlers.GetStudyActivity)
		studyActivities.GET(":id/study_sessions", handlers.GetStudyActivitySessions)
		studyActivities.POST("", handlers.CreateStudyActivity)
	}

	// Words Routes
	words := r.Group("/api/words")
	{
		words.GET("", handlers.GetWords)
		words.GET(":id", handlers.GetWordByID)
	}

	// Groups Routes
	groups := r.Group("/api/groups")
	{
		groups.GET("", handlers.GetGroups)
		groups.GET(":id", handlers.GetGroupByID)
		groups.GET(":id/words", handlers.GetWordsByGroup)
		groups.GET(":id/study_sessions", handlers.GetStudySessionsByGroup)
	}

	// Study Sessions Routes
	studySessions := r.Group("/api/study_sessions")
	{
		studySessions.GET("", handlers.GetStudySessions)
		studySessions.GET(":id", handlers.GetStudySessionByID)
		studySessions.GET(":id/words", handlers.GetWordsByStudySession)
		studySessions.POST(":id/words/:word_id/review", handlers.ReviewWord)
	}

	// Reset Routes
	reset := r.Group("/api")
	{
		reset.POST("/reset_history", handlers.ResetHistory)
		reset.POST("/full_reset", handlers.FullReset)
	}

	r.Run(":8080")
}

// CORS Middleware
func corsMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		c.Writer.Header().Set("Access-Control-Allow-Origin", "*")
		c.Writer.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
		c.Writer.Header().Set("Access-Control-Allow-Headers", "Content-Type, Authorization")
		if c.Request.Method == "OPTIONS" {
			c.AbortWithStatus(http.StatusNoContent)
			return
		}
		c.Next()
	}
}

// Logging Middleware
func loggingMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		c.Next()
	}
}
